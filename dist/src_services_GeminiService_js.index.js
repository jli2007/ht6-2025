"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcom_adobe_uxp_starter_react"] = self["webpackChunkcom_adobe_uxp_starter_react"] || []).push([["src_services_GeminiService_js"],{

/***/ "./src/services/GeminiService.js":
/*!***************************************!*\
  !*** ./src/services/GeminiService.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GeminiService: () => (/* binding */ GeminiService)\n/* harmony export */ });\n/**\n * Gemini Service for generating CSS-like Photoshop adjustments\n */\n\nclass GeminiService {\n  constructor(apiKey = null) {\n    // Use provided API key or fall back to environment variable\n    this.apiKey = apiKey || process.env.GEMINI_API_KEY;\n    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent';\n    if (!this.apiKey) {\n      throw new Error('Gemini API key not found. Please set GEMINI_API_KEY in your .env file or provide it as a parameter.');\n    }\n  }\n\n  /**\n   * Generate CSS-like code from a text description\n   */\n  async generateCSS(prompt) {\n    try {\n      const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: this.buildPrompt(prompt)\n            }]\n          }]\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Gemini API Response:', data);\n      if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n        const generatedText = data.candidates[0].content.parts[0].text;\n        return this.extractCSSFromResponse(generatedText);\n      } else {\n        throw new Error('No valid response from Gemini API');\n      }\n    } catch (error) {\n      console.error('Error generating CSS:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Build the prompt for Gemini - focused on exactness and controllability\n   */\n  buildPrompt(userPrompt) {\n    return `You are an expert Photoshop adjustment generator. Your job is to convert inexact, vague descriptions into precise, controllable CSS-like recipes that can be applied to Photoshop layers.\n\nUser request: \"${userPrompt}\"\n\nYour task is to solve the \"exactness\" problem by translating this messy input into a clean, precise recipe.\n\nGenerate CSS-like code using these supported properties:\n- contrast: percentage (e.g., 120%, -20%)\n- saturation: percentage (e.g., 150%, -50%)\n- brightness: percentage (e.g., 105%, -10%)\n- hue: degrees (e.g., 15deg, -30deg)\n- blur: pixels (e.g., 2px, 0.5px)\n- opacity: percentage (e.g., 85%, 100%)\n- levels: \"shadows, midtones, highlights\" (e.g., \"0, 1.2, 255\")\n- vibrance: percentage (e.g., 25%, -15%)\n- shadows: percentage (e.g., 20%, -10%)\n- highlights: percentage (e.g., -15%, 25%)\n\nRules for exactness:\n1. Use realistic, precise values that would create the described effect\n2. Think like a professional colorist - be specific about the adjustments\n3. Include comments explaining your choices\n4. Return ONLY the CSS-like code, no other text\n5. Use the .layer selector\n6. Keep it concise but effective\n7. Make it easily editable by the user\n\nExample output format:\n/* CSS-like Photoshop adjustments for: ${userPrompt} */\n.layer {\n    contrast: 120%;\n    saturation: -20%;\n    brightness: 105%;\n    hue: 15deg;\n    blur: 2px;\n    opacity: 85%;\n}\n\nNow generate a precise, controllable recipe for: \"${userPrompt}\"`;\n  }\n\n  /**\n   * Extract CSS code from Gemini's response\n   */\n  extractCSSFromResponse(response) {\n    console.log('Extracting CSS from response:', response);\n\n    // Look for CSS-like code blocks\n    const cssMatch = response.match(/```(?:css)?\\s*([\\s\\S]*?)\\s*```/);\n    if (cssMatch) {\n      return cssMatch[1].trim();\n    }\n\n    // Look for CSS-like code without code blocks\n    const cssPattern = /\\.layer\\s*\\{[\\s\\S]*?\\}/;\n    const match = response.match(cssPattern);\n    if (match) {\n      return match[0];\n    }\n\n    // If no CSS found, return a basic template\n    return `/* Generated CSS for: ${response} */\n.layer {\n    contrast: 100%;\n    saturation: 0%;\n    brightness: 100%;\n}`;\n  }\n\n  /**\n   * Generate CSS from an image (using Gemini Vision API)\n   */\n  async generateCSSFromImage(imageData, description = \"\") {\n    try {\n      // Convert image data to base64 if it's a data URL\n      let base64Data;\n      if (imageData.startsWith('data:')) {\n        base64Data = imageData.split(',')[1];\n      } else {\n        base64Data = await this.imageToBase64(imageData);\n      }\n      const response = await fetch(`${this.baseUrl}?key=${this.apiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: this.buildImagePrompt(description)\n            }, {\n              inline_data: {\n                mime_type: \"image/jpeg\",\n                data: base64Data\n              }\n            }]\n          }]\n        })\n      });\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('API Error Response:', errorText);\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log('Gemini API Response:', data);\n      if (data.candidates && data.candidates[0] && data.candidates[0].content) {\n        const generatedText = data.candidates[0].content.parts[0].text;\n        return this.extractCSSFromResponse(generatedText);\n      } else {\n        throw new Error('No valid response from Gemini API');\n      }\n    } catch (error) {\n      console.error('Error generating CSS from image:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Build prompt for image-based generation - focused on exactness\n   */\n  buildImagePrompt(description) {\n    return `You are an expert Photoshop adjustment generator. Analyze this image and generate a precise, controllable CSS-like recipe that would recreate its visual style.\n\n${description ? `Additional context: \"${description}\"` : ''}\n\nYour job is to solve the \"exactness\" problem by translating this visual inspiration into a precise, editable recipe.\n\nGenerate CSS-like code using these supported properties:\n- contrast: percentage (e.g., 120%, -20%)\n- saturation: percentage (e.g., 150%, -50%)\n- brightness: percentage (e.g., 105%, -10%)\n- hue: degrees (e.g., 15deg, -30deg)\n- blur: pixels (e.g., 2px, 0.5px)\n- opacity: percentage (e.g., 85%, 100%)\n- levels: \"shadows, midtones, highlights\" (e.g., \"0, 1.2, 255\")\n- vibrance: percentage (e.g., 25%, -15%)\n- shadows: percentage (e.g., 20%, -10%)\n- highlights: percentage (e.g., -15%, 25%)\n\nAnalyze the image's:\n- Color temperature and hue shifts\n- Contrast and brightness levels\n- Saturation and vibrance characteristics\n- Overall mood and style\n- Any special effects or filters\n\nThink like a professional colorist and provide precise, controllable values that the user can fine-tune.\n\nReturn ONLY the CSS-like code, no other text. Use the .layer selector. Make it easily editable.`;\n  }\n\n  /**\n   * Convert image URL to base64 (for API calls)\n   */\n  async imageToBase64(imageUrl) {\n    try {\n      const response = await fetch(imageUrl);\n      const blob = await response.blob();\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          const base64 = reader.result.split(',')[1];\n          resolve(base64);\n        };\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    } catch (error) {\n      console.error('Error converting image to base64:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Test the API connection\n   */\n  async testConnection() {\n    try {\n      const response = await this.generateCSS(\"test\");\n      return response && response.length > 0;\n    } catch (error) {\n      console.error('API connection test failed:', error);\n      return false;\n    }\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/GeminiService.js\n\n}");

/***/ })

}]);